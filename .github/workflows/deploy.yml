name: CI/CD for Docker Compose and Minikube

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET with proper permissions
        run: |
          echo "Setting up .NET for self-hosted runner..."
          
          # Check if .NET is already installed
          if command -v dotnet &> /dev/null; then
            echo ".NET is already installed:"
            dotnet --version
            dotnet --list-sdks
          else
            echo "Installing .NET manually..."
            
            # Create local dotnet directory
            mkdir -p $HOME/.dotnet
            export DOTNET_ROOT=$HOME/.dotnet
            export PATH=$DOTNET_ROOT:$PATH
            
            # Download and install .NET
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --install-dir $HOME/.dotnet
            
            # Add to PATH for subsequent steps
            echo "DOTNET_ROOT=$HOME/.dotnet" >> $GITHUB_ENV
            echo "$HOME/.dotnet" >> $GITHUB_PATH
            
            echo "Verifying installation:"
            $HOME/.dotnet/dotnet --version
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver-opts: |
            network=host

      - name: Build and test with Docker Compose
        run: |
          echo "Building services with Docker Compose..."
          
          # Build all services
          docker compose build
          
          # Start services in detached mode
          docker compose up -d
          
          echo "Waiting for services to start..."
          sleep 30
          
          # Test services
          echo "Testing Core API on port 5301..."
          curl -f http://localhost:5301/health || curl -f http://localhost:5301/ || echo "Core API not responding"
          
          echo "Testing Users API on port 5302..."
          curl -f http://localhost:5302/health || curl -f http://localhost:5302/ || echo "Users API not responding"
          
          # Stop Docker Compose services
          docker compose down
          
          echo "Docker Compose build and test completed successfully"

      - name: Build individual images for Kubernetes
        run: |
          echo "Building individual Docker images for Kubernetes deployment..."
          
          # Build Core API
          docker buildx build \
            --file Ecom.Core/src/Ecom.Core.API/Dockerfile \
            --tag moclaw/ecom-core-api:latest \
            --load \
            --progress=plain \
            .
          
          # Build Users API
          docker buildx build \
            --file Ecom.Users/src/Ecom.Users.API/Dockerfile \
            --tag moclaw/ecom-users-api:latest \
            --load \
            --progress=plain \
            .
          
          echo "Verifying built images..."
          docker images | grep moclaw

      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest
        with:
          driver: docker
          container-runtime: docker
          
      - name: Load images to Minikube
        run: |
          echo "Loading images to Minikube..."
          
          minikube image load moclaw/ecom-core-api:latest
          minikube image load moclaw/ecom-users-api:latest
          
          echo "Verifying images in Minikube..."
          minikube image ls | grep moclaw

      - name: Deploy to Minikube
        run: |
          echo "Deploying to Kubernetes..."
          
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/core-deployment.yaml
          kubectl apply -f k8s/users-deployment.yaml
          kubectl apply -f k8s/monitoring/prometheus-config.yaml
          
          echo "Waiting for deployments..."
          kubectl wait --for=condition=available --timeout=300s deployment/ecom-core-api -n ecommerce
          kubectl wait --for=condition=available --timeout=300s deployment/ecom-users-api -n ecommerce

      - name: Test Kubernetes deployment
        run: |
          echo "Testing Kubernetes services..."
          
          MINIKUBE_IP=$(minikube ip)
          echo "Minikube IP: $MINIKUBE_IP"
          
          # Test external NodePort access (matching Docker Compose port pattern)
          echo "Testing Core API via NodePort 30301..."
          curl -f http://$MINIKUBE_IP:30301/ || echo "Core API NodePort not accessible"
          
          echo "Testing Users API via NodePort 30302..."
          curl -f http://$MINIKUBE_IP:30302/ || echo "Users API NodePort not accessible"
          
          # Test internal service connectivity
          kubectl port-forward -n ecommerce service/ecom-core-service 5301:80 &
          CORE_PID=$!
          sleep 10
          curl -f http://localhost:5301/ || echo "Core API service not accessible"
          kill $CORE_PID || true
          
          kubectl port-forward -n ecommerce service/ecom-users-service 5302:80 &
          USERS_PID=$!
          sleep 10
          curl -f http://localhost:5302/ || echo "Users API service not accessible"
          kill $USERS_PID || true

      - name: Display deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Docker Compose Services:"
          echo "- Core API: http://localhost:5301"
          echo "- Users API: http://localhost:5302"
          echo ""
          
          MINIKUBE_IP=$(minikube ip)
          echo "Kubernetes Services (External):"
          echo "- Core API: http://$MINIKUBE_IP:30301"
          echo "- Users API: http://$MINIKUBE_IP:30302"
          echo ""
          echo "Kubernetes Cluster Status:"
          kubectl get pods -n ecommerce
          kubectl get services -n ecommerce