name: CI/CD Pipeline - Ecommerce Platform

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0"
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  IMAGE_GATEWAY: moclaw/ecom-gateway-api
  IMAGE_CORE: moclaw/ecom-core-api
  IMAGE_USERS: moclaw/ecom-users-api
  HEALTH_CHECK_TIMEOUT: 180s

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Check for changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - will deploy"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Main branch - will deploy"
          else
            if git diff --name-only HEAD~1 HEAD | grep -E "\\.(cs|csproj|sln|Dockerfile|yml|yaml)$"; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "Source code changes detected - will deploy"
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "No significant changes - skipping deployment"
            fi
          fi

      - name: üîß Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üì¶ Restore dependencies
        run: |
          dotnet restore Moclaw.Ecommerce.sln --verbosity minimal

      - name: üèóÔ∏è Build solution
        run: |
          dotnet build Moclaw.Ecommerce.sln --configuration Release --no-restore --verbosity minimal

      - name: üß™ Run tests
        run: |
          if find . -name "*.Test*.csproj" -o -name "*Test.csproj" | head -1 | grep -q .; then
            echo "Running unit tests..."
            dotnet test --configuration Release --no-build --verbosity minimal --parallel
          else
            echo "No test projects found, skipping tests"
          fi

      - name: üè∑Ô∏è Generate metadata
        id: meta
        run: |
          TAG="${{ github.sha }}"
          SHORT_SHA="${TAG:0:8}"
          echo "tags=${SHORT_SHA}" >> $GITHUB_OUTPUT

  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service:
          - name: gateway-api
            dockerfile: Ecom.Gateway/src/Ecom.Gateway.API/Dockerfile
            image_name: moclaw/ecom-gateway-api
          - name: core-api
            dockerfile: Ecom.Core/src/Ecom.Core.API/Dockerfile
            image_name: moclaw/ecom-core-api
          - name: users-api
            dockerfile: Ecom.Users/src/Ecom.Users.API/Dockerfile
            image_name: moclaw/ecom-users-api
      fail-fast: false
      max-parallel: 3

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: üèóÔ∏è Build and push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: |
            ${{ matrix.service.image_name }}:${{ needs.build-and-test.outputs.image-tag }}
            ${{ matrix.service.image_name }}:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ matrix.service.image_name }}:buildcache
          cache-to: type=registry,ref=${{ matrix.service.image_name }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-docker-compose:
    name: Deploy with Docker Compose
    runs-on: self-hosted
    needs: [build-and-test, build-images]
    if: needs.build-and-test.outputs.should-deploy == 'true'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Login to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: üöÄ Deploy with Docker Compose
        env:
          GATEWAY_IMAGE: ${{ env.IMAGE_GATEWAY }}:${{ needs.build-and-test.outputs.image-tag }}
          CORE_IMAGE: ${{ env.IMAGE_CORE }}:${{ needs.build-and-test.outputs.image-tag }}
          USERS_IMAGE: ${{ env.IMAGE_USERS }}:${{ needs.build-and-test.outputs.image-tag }}
          IMAGE_TAG: ${{ needs.build-and-test.outputs.image-tag }}
        run: |
          set -e

          # Set error handling
          trap 'echo "‚ùå Deployment failed at line $LINENO"' ERR

          echo "üöÄ Starting Docker Compose deployment..."
          echo "Gateway Image: $GATEWAY_IMAGE"
          echo "Core Image: $CORE_IMAGE"
          echo "Users Image: $USERS_IMAGE"

          # Function for retry logic
          retry_command() {
            local max_attempts=3
            local attempt=1
            local command="$1"
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts: $command"
              if eval "$command"; then
                return 0
              fi
              attempt=$((attempt + 1))
              [ $attempt -le $max_attempts ] && sleep 10
            done
            echo "Command failed after $max_attempts attempts: $command"
            return 1
          }

          # Pull latest images
          echo "üì¶ Pulling Docker images..."
          retry_command "docker pull $GATEWAY_IMAGE"
          retry_command "docker pull $CORE_IMAGE"
          retry_command "docker pull $USERS_IMAGE"

          # Stop existing containers
          echo "üõë Stopping existing containers..."
          docker-compose -f docker-compose.yml down --remove-orphans || true

          # Set image tags in environment
          export DOCKER_REGISTRY=""
          export GATEWAY_TAG=$IMAGE_TAG
          export CORE_TAG=$IMAGE_TAG
          export USERS_TAG=$IMAGE_TAG

          # Create docker-compose override with specific image tags
          cat > docker-compose.override.yml << EOF
          services:
            ecom.gateway.api:
              image: $GATEWAY_IMAGE
            ecom.core.api:
              image: $CORE_IMAGE
            ecom.users.api:
              image: $USERS_IMAGE
          EOF

          # Deploy services
          echo "üöÄ Starting services with Docker Compose..."
          docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d --no-build

          # Wait for services to be healthy
          echo "‚è≥ Waiting for services to be healthy..."
          timeout 300 bash -c '
            while true; do
              if docker-compose -f docker-compose.yml -f docker-compose.override.yml ps | grep -q "Up (healthy).*ecom.gateway.api" && \
                 docker-compose -f docker-compose.yml -f docker-compose.override.yml ps | grep -q "Up (healthy).*ecom.core.api" && \
                 docker-compose -f docker-compose.yml -f docker-compose.override.yml ps | grep -q "Up (healthy).*ecom.users.api"; then
                echo "‚úÖ All services are healthy"
                break
              fi
              echo "Waiting for services to be healthy..."
              sleep 10
            done
          '

          # Enhanced health checks
          echo "üîç Performing health checks..."

          health_check() {
            local url=$1
            local service_name=$2
            local max_attempts=15
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if curl -s --connect-timeout 5 --max-time 10 "$url" >/dev/null 2>&1; then
                echo "‚úÖ $service_name is healthy"
                return 0
              fi
              echo "Waiting for $service_name... (attempt $attempt/$max_attempts)"
              sleep 10
              attempt=$((attempt + 1))
            done
            echo "‚ö†Ô∏è $service_name health check timeout"
            return 1
          }

          # Perform health checks
          health_check "http://localhost:5300/health" "Gateway API" &
          health_check "http://localhost:5301/health" "Core API" &
          health_check "http://localhost:5302/health" "Users API" &
          wait

          # Display service status
          echo ""
          echo "üöÄ Deployment Complete!"
          echo "=================================="
          echo "Gateway API: http://localhost:5300"
          echo "Core API (via Gateway): http://localhost:5300/api/core"
          echo "Users API (via Gateway): http://localhost:5300/api/users"
          echo "Core API (Direct): http://localhost:5301"
          echo "Users API (Direct): http://localhost:5302"
          echo "Prometheus: http://localhost:9090"
          echo "Grafana: http://localhost:3000"
          echo "Image Tag: $IMAGE_TAG"
          echo ""
          echo "Service Status:"
          docker-compose -f docker-compose.yml -f docker-compose.override.yml ps

          # Cleanup old images to save space
          docker image prune -f --filter "until=24h" >/dev/null 2>&1 || true

      - name: üßπ Enhanced Cleanup on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed, starting comprehensive cleanup..."
          
          # Stop and remove all containers
          echo "üõë Stopping and removing containers..."
          docker-compose -f docker-compose.yml down --remove-orphans --volumes --timeout 30 || true
          
          # Remove any dangling containers
          echo "üßπ Removing dangling containers..."
          docker container prune -f || true
          
          # Remove unused networks
          echo "üåê Cleaning up networks..."
          docker network prune -f || true
          
          # Remove unused volumes
          echo "üíæ Cleaning up volumes..."
          docker volume prune -f || true
          
          # Remove unused images (more aggressive cleanup)
          echo "üñºÔ∏è Cleaning up images..."
          docker image prune -f --filter "until=1h" || true
          docker image prune -a -f --filter "label=org.opencontainers.image.title=ecom" || true
          
          # Remove build cache
          echo "üóÑÔ∏è Cleaning up build cache..."
          docker builder prune -f --filter "until=1h" || true
          
          # Kill any remaining processes on deployment ports
          echo "üîå Cleaning up ports..."
          sudo lsof -ti:5300 | xargs -r sudo kill -9 || true
          sudo lsof -ti:5301 | xargs -r sudo kill -9 || true
          sudo lsof -ti:5302 | xargs -r sudo kill -9 || true
          
          # Clear temporary files
          echo "üìÅ Cleaning up temporary files..."
          rm -f docker-compose.override.yml || true
          
          # Show disk usage after cleanup
          echo "üíø Disk usage after cleanup:"
          df -h
          
          # Show remaining Docker resources
          echo "üê≥ Remaining Docker resources:"
          docker system df
          
          echo "‚úÖ Comprehensive cleanup completed"
          echo "‚ùå Deployment failed, cleanup executed"

  cleanup-resources:
    name: Cleanup Resources
    runs-on: self-hosted
    needs: [deploy-docker-compose]
    if: always() && needs.build-and-test.outputs.should-deploy == 'true'
    
    steps:
      - name: üßπ Post-deployment cleanup
        run: |
          echo "üßπ Starting post-deployment cleanup..."
          
          # Clean up old Docker images (keep last 3 versions)
          echo "üñºÔ∏è Cleaning up old images..."
          
          cleanup_old_images() {
            local image_name=$1
            echo "Cleaning up old versions of $image_name..."
            
            # Get all tags for the image, skip latest and current deployment
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" \
              | grep "^$image_name:" \
              | grep -v ":latest" \
              | grep -v ":${{ needs.build-and-test.outputs.image-tag }}" \
              | sort -k2 -r \
              | tail -n +4 \
              | awk '{print $1}' \
              | xargs -r docker rmi -f || true
          }
          
          cleanup_old_images "${{ env.IMAGE_GATEWAY }}"
          cleanup_old_images "${{ env.IMAGE_CORE }}"
          cleanup_old_images "${{ env.IMAGE_USERS }}"
          
          # Clean up dangling images and build cache
          echo "üóëÔ∏è Cleaning up dangling resources..."
          docker image prune -f --filter "until=24h" || true
          docker builder prune -f --filter "until=24h" || true
          
          # Clean up unused networks (keep active ones)
          echo "üåê Cleaning up unused networks..."
          docker network prune -f || true
          
          # Clean up temporary files
          echo "üìÅ Cleaning up temporary files..."
          rm -f docker-compose.override.yml || true
          
          # Show final system status
          echo "üìä Final system status:"
          echo "Docker system usage:"
          docker system df
          echo ""
          echo "Disk usage:"
          df -h
          echo ""
          echo "Active containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "‚úÖ Post-deployment cleanup completed"

  notify-status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-docker-compose, cleanup-resources]
    if: always() && needs.build-and-test.outputs.should-deploy == 'true'
    
    steps:
      - name: üì¢ Deployment Status Summary
        run: |
          echo "üöÄ Deployment Pipeline Summary"
          echo "=============================="
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Deploy: ${{ needs.deploy-docker-compose.result }}"
          echo "Cleanup: ${{ needs.cleanup-resources.result }}"
          echo "Image Tag: ${{ needs.build-and-test.outputs.image-tag }}"
          echo ""
          
          if [ "${{ needs.deploy-docker-compose.result }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Services are available at:"
            echo "  - Gateway API: http://localhost:5300"
            echo "  - Core API: http://localhost:5301"
            echo "  - Users API: http://localhost:5302"
          else
            echo "‚ùå Deployment failed!"
            echo "üßπ Resources have been cleaned up automatically"
            echo "üîç Check the deployment logs for details"
          fi

