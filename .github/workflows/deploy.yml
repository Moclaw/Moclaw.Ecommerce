name: CI/CD for Docker Compose and Minikube

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0'
  REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  IMAGE_CORE: moclaw/ecom-core-api
  IMAGE_USERS: moclaw/ecom-users-api

jobs:
  build-and-deploy:
    runs-on: self-hosted
    services:
      docker:
        image: docker:20.10-dind
        options: --privileged

    steps:
      - name: Pre-clean workspace
        run: |
          echo "🧹 Cleaning workspace..."
          docker stop $(docker ps -aq) 2>/dev/null || true
          docker rm $(docker ps -aq) 2>/dev/null || true
          docker system prune -f || true
          rm -rf ./monitoring 2>/dev/null || true
          for port in 5301 5302 9090 3000; do
            lsof -ti:$port | xargs -r kill -9 2>/dev/null || true
          done

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore & Build & Test
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet test --configuration Release --no-build

      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build Docker images
        run: |
          echo "🐳 Building images..."
          build_image() {
            local dockerfile=$1
            local tag=$2
            local max_attempts=3
            local attempt=1

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt/$max_attempts for $tag"
              docker system prune -f || true
              if [ $attempt -eq 1 ]; then
                DOCKER_BUILDKIT=1 docker build -f "$dockerfile" -t "${tag}:${{ github.sha }}" .
              elif [ $attempt -eq 2 ]; then
                DOCKER_BUILDKIT=0 docker build -f "$dockerfile" -t "${tag}:${{ github.sha }}" .
              else
                DOCKER_BUILDKIT=0 docker build --no-cache -f "$dockerfile" -t "${tag}:${{ github.sha }}" .
              fi && return 0

              echo "Build attempt $attempt failed"
              attempt=$((attempt+1))
              sleep 10
            done

            echo "❌ Failed to build $tag"
            return 1
          }

          build_image "Ecom.Core/src/Ecom.Core.API/Dockerfile" "${{ env.IMAGE_CORE }}"
          build_image "Ecom.Users/src/Ecom.Users.API/Dockerfile" "${{ env.IMAGE_USERS }}"

      - name: Create monitoring configuration
        run: |
          echo "⚙️ Creating monitoring config..."
          mkdir -p monitoring/dashboards
          cat > monitoring/prometheus.yml << 'EOF'
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'core-api'
              static_configs:
                - targets: ['core-api-service:5301']
              metrics_path: '/metrics'
            - job_name: 'users-api'
              static_configs:
                - targets: ['users-api-service:5302']
              metrics_path: '/metrics'
          EOF
          cat > monitoring/dashboards/ecommerce-api.json << 'EOF'
          {
            "dashboard": {
              "title": "Ecommerce API Metrics",
              "panels": [
                {
                  "title": "HTTP Requests Rate",
                  "type": "graph",
                  "targets": [{"expr": "rate(http_requests_total[5m])"}],
                  "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
                }
              ],
              "time": {"from": "now-1h", "to": "now"}
            }
          }
          EOF

      - name: Setup Minikube
        uses: medyagh/setup-minikube@latest
        with:
          driver: docker
          kubernetes-version: 'v1.33.1'
          memory: 4096
          cpus: 2
          start: false

      - name: Start Minikube
        run: |
          echo "🚀 Starting Minikube..."
          minikube delete || true
          minikube start --driver=docker --kubernetes-version=v1.33.1 --memory=4096 --cpus=2 --wait=all
          minikube addons disable storage-provisioner || true
          minikube addons disable default-storageclass || true
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

      - name: Load images to Minikube
        run: |
          echo "🔄 Loading images..."
          minikube image load "${{ env.IMAGE_CORE }}:${{ github.sha }}"
          minikube image load "${{ env.IMAGE_USERS }}:${{ github.sha }}"

      - name: Deploy Kubernetes manifests
        run: |
          echo "🚀 Deploying to Kubernetes..."
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/
          kubectl set image deployment/core-api core-api="${{ env.IMAGE_CORE }}:${{ github.sha }}" -n ecommerce
          kubectl set image deployment/users-api users-api="${{ env.IMAGE_USERS }}:${{ github.sha }}" -n ecommerce
          
          kubectl create configmap prometheus-config --from-file=monitoring/prometheus.yml -n monitoring --dry-run=client -o yaml | kubectl apply -f -
          kubectl rollout status deployment/core-api -n ecommerce --timeout=300s
          kubectl rollout status deployment/users-api -n ecommerce --timeout=300s

      - name: Deploy production services
        run: |
          echo "📦 Deploying production services..."
          docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
          echo "Waiting for services..."
          sleep 20
          curl -f http://localhost:5301/health && curl -f http://localhost:5302/health

      - name: Display deployment summary
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          IP=$(minikube ip)
          echo "Core API: http://localhost:5301"
          echo "Users API: http://localhost:5302"
          echo "Prometheus: http://$IP:30090"
          echo "Grafana: http://$IP:30030 (admin/admin123)"
          kubectl get svc -n ecommerce
          kubectl get svc -n monitoring
