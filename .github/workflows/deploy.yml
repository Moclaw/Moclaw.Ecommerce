name: CI/CD Pipeline - Ecommerce Platform

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0"
  REGISTRY_URL: ${{ secrets.REGISTRY_URL || 'docker.io' }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
  IMAGE_GATEWAY: ecomgatewayapi
  IMAGE_CORE: ecomcoreapi
  IMAGE_USERS: ecomusersapi
  HEALTH_CHECK_TIMEOUT: 300s

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      should-deploy: ${{ steps.changes.outputs.should-deploy }}

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Check for changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Manual trigger - will deploy"
          elif [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "Main/Develop branch - will deploy"
          else
            if git diff --name-only HEAD~1 HEAD | grep -E "\\.(cs|csproj|sln|Dockerfile|yml|yaml|json)$"; then
              echo "should-deploy=true" >> $GITHUB_OUTPUT
              echo "Source code changes detected - will deploy"
            else
              echo "should-deploy=false" >> $GITHUB_OUTPUT
              echo "No significant changes - skipping deployment"
            fi
          fi

      - name: üîß Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: üì¶ Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.props', '**/*.targets') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: üì¶ Restore dependencies
        run: |
          dotnet restore Moclaw.Ecommerce.sln --verbosity minimal

      - name: üèóÔ∏è Build solution
        run: |
          dotnet build Moclaw.Ecommerce.sln --configuration Release --no-restore --verbosity minimal

      - name: üß™ Run tests
        run: |
          echo "üîç Searching for test projects..."
          if find . -name "*Test*.csproj" -o -name "*Tests.csproj" | head -1 | grep -q .; then
            echo "‚úÖ Test projects found, running tests..."
            dotnet test Moclaw.Ecommerce.sln --configuration Release --no-build --verbosity minimal --logger trx --results-directory ./TestResults
          else
            echo "‚ö†Ô∏è No test projects found, skipping tests"
          fi

      - name: üè∑Ô∏è Generate metadata
        id: meta
        run: |
          TAG="${{ github.sha }}"
          SHORT_SHA="${TAG:0:8}"
          echo "tags=${SHORT_SHA}" >> $GITHUB_OUTPUT

  build-images:
    name: Build Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: needs.build-and-test.outputs.should-deploy == 'true'
    strategy:
      matrix:
        service:
          - name: gateway-api
            dockerfile: Ecom.Gateway/src/Ecom.Gateway.API/Dockerfile
            image_name: ecomgatewayapi
          - name: core-api
            dockerfile: Ecom.Core/src/Ecom.Core.API/Dockerfile
            image_name: ecomcoreapi
          - name: users-api
            dockerfile: Ecom.Users/src/Ecom.Users.API/Dockerfile
            image_name: ecomusersapi
      fail-fast: false
      max-parallel: 3

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to Docker registry
        if: env.REGISTRY_USERNAME != '' && env.REGISTRY_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: ‚ÑπÔ∏è Registry info
        run: |
          if [ -n "${{ env.REGISTRY_USERNAME }}" ] && [ -n "${{ env.REGISTRY_PASSWORD }}" ]; then
            echo "‚úÖ Registry credentials available - will push images"
            echo "Registry: ${{ env.REGISTRY_URL }}"
            echo "Username: ${{ env.REGISTRY_USERNAME }}"
            echo "Image will be tagged as: ${{ env.REGISTRY_USERNAME }}/${{ matrix.service.image_name }}:${{ needs.build-and-test.outputs.image-tag }}"
          else
            echo "‚ö†Ô∏è No registry credentials - will only build locally"
          fi

      - name: üèóÔ∏è Build and push ${{ matrix.service.name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.service.dockerfile }}
          push: ${{ env.REGISTRY_USERNAME != '' && env.REGISTRY_PASSWORD != '' }}
          tags: |
            ${{ env.REGISTRY_USERNAME }}/${{ matrix.service.image_name }}:${{ needs.build-and-test.outputs.image-tag }}
            ${{ env.REGISTRY_USERNAME }}/${{ matrix.service.image_name }}:latest
          platforms: linux/amd64
          cache-from: type=registry,ref=${{ env.REGISTRY_USERNAME }}/${{ matrix.service.image_name }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY_USERNAME }}/${{ matrix.service.image_name }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-local:
    name: Deploy to Local Environment
    runs-on: ubuntu-latest
    needs: [build-and-test, build-images]
    if: needs.build-and-test.outputs.should-deploy == 'true'

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîê Login to Docker registry
        if: env.REGISTRY_USERNAME != '' && env.REGISTRY_PASSWORD != ''
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_URL }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: üßπ Clean up existing containers
        run: |
          echo "üßπ Cleaning up existing containers..."
          docker compose down --remove-orphans || true
          docker container prune -f || true
          docker network prune -f || true

      - name: ÔøΩ Setup monitoring configuration
        run: |
          mkdir -p monitoring
          if [ ! -f "monitoring/prometheus.yml" ]; then
            cat > monitoring/prometheus.yml << 'EOF'
          global:
            scrape_interval: 15s
            evaluation_interval: 15s

          scrape_configs:
            - job_name: 'prometheus'
              static_configs:
                - targets: ['localhost:9090']
            
            - job_name: 'ecom-gateway'
              static_configs:
                - targets: ['ecom.gateway.api:8080']
              metrics_path: '/metrics'
              
            - job_name: 'ecom-core'
              static_configs:
                - targets: ['ecom.core.api:8080']
              metrics_path: '/metrics'
              
            - job_name: 'ecom-users'
              static_configs:
                - targets: ['ecom.users.api:8080']
              metrics_path: '/metrics'
          EOF
          fi

      - name: üöÄ Deploy with Docker Compose
        env:
          IMAGE_TAG: ${{ needs.build-and-test.outputs.image-tag }}
          DOCKER_REGISTRY: ${{ env.REGISTRY_URL && format('{0}/', env.REGISTRY_URL) || '' }}
        run: |
          echo "üöÄ Starting deployment..."
          echo "Image Tag: $IMAGE_TAG"
          echo "Registry: $DOCKER_REGISTRY"

          # Create override file with specific image tags if needed
          if [ -n "$DOCKER_REGISTRY" ] && [ -n "$IMAGE_TAG" ]; then
            cat > docker-compose.override.yml << EOF
          version: '3.8'
          services:
            ecom.gateway.api:
              image: ${DOCKER_REGISTRY}${IMAGE_GATEWAY}:${IMAGE_TAG}
            ecom.core.api:
              image: ${DOCKER_REGISTRY}${IMAGE_CORE}:${IMAGE_TAG}
            ecom.users.api:
              image: ${DOCKER_REGISTRY}${IMAGE_USERS}:${IMAGE_TAG}
          EOF
          fi

          # Start services
          if [ -f "docker-compose.override.yml" ]; then
            docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
          else
            docker compose up -d --build
          fi

      - name: ‚è≥ Wait for services to be ready
        run: |
          echo "‚è≥ Waiting for services to start..."
          sleep 30

          # Simple health check function
          check_service() {
            local port=$1
            local name=$2
            local max_attempts=10
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              if curl -s -f "http://localhost:$port/health" > /dev/null 2>&1 || \
                 curl -s -f "http://localhost:$port" > /dev/null 2>&1; then
                echo "‚úÖ $name is responding on port $port"
                return 0
              fi
              echo "‚è≥ Waiting for $name on port $port (attempt $attempt/$max_attempts)..."
              sleep 10
              attempt=$((attempt + 1))
            done
            echo "‚ö†Ô∏è $name health check timeout on port $port"
            return 1
          }

          # Check each service
          check_service 5300 "Gateway API"
          check_service 5301 "Core API"  
          check_service 5302 "Users API"

      - name: üìä Show deployment status
        run: |
          echo "üéâ Deployment completed!"
          echo "===================="
          echo "Services:"
          docker compose ps
          echo ""
          echo "Service URLs:"
          echo "- Gateway API: http://localhost:5300"
          echo "- Core API: http://localhost:5301"
          echo "- Users API: http://localhost:5302"
          echo "- Prometheus: http://localhost:9090"
          echo "- Grafana: http://localhost:3000"

      - name: üßπ Cleanup on failure
        if: failure()
        run: |
          echo "‚ùå Deployment failed, cleaning up..."
          docker-compose logs --tail=50
          docker-compose down --remove-orphans || true
          docker container prune -f || true

  post-deploy-cleanup:
    name: Post-deployment Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-local]
    if: always()

    steps:
      - name: üßπ Post-deployment cleanup
        run: |
          echo "üßπ Starting post-deployment cleanup..."

          # Clean up old Docker images (keep last 3 versions)
          echo "üñºÔ∏è Cleaning up old images..."
          docker image prune -f --filter "until=24h" || true
          docker builder prune -f --filter "until=24h" || true

          # Clean up unused networks (keep active ones)
          echo "üåê Cleaning up unused networks..."
          docker network prune -f || true

          # Clean up temporary files
          echo "üìÅ Cleaning up temporary files..."
          rm -f docker-compose.override.yml || true

          # Show final system status
          echo "üìä Final system status:"
          echo "Docker system usage:"
          docker system df || true
          echo ""
          echo "Active containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true

          echo "‚úÖ Post-deployment cleanup completed"

  notify-status:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [build-and-test, deploy-local, post-deploy-cleanup]
    if: always()

    steps:
      - name: üì¢ Deployment Status Summary
        run: |
          echo "üöÄ Deployment Pipeline Summary"
          echo "=============================="
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Deploy: ${{ needs.deploy-local.result }}"
          echo "Cleanup: ${{ needs.post-deploy-cleanup.result }}"
          echo "Image Tag: ${{ needs.build-and-test.outputs.image-tag }}"
          echo ""

          if [ "${{ needs.deploy-local.result }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Services are available at:"
            echo "  - Gateway API: http://localhost:5300"
            echo "  - Core API: http://localhost:5301"
            echo "  - Users API: http://localhost:5302"
            echo "  - Prometheus: http://localhost:9090"
            echo "  - Grafana: http://localhost:3000"
          else
            echo "‚ùå Deployment failed!"
            echo "üßπ Resources have been cleaned up automatically"
            echo "üîç Check the deployment logs for details"
          fi
