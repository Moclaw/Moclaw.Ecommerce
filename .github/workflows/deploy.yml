name: CI/CD for Minikube

on:
  push:
    branches: [ main ]


jobs:
  build-and-deploy:
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET with proper permissions
        run: |
          echo "Setting up .NET for self-hosted runner..."
          
          # Check if .NET is already installed
          if command -v dotnet &> /dev/null; then
            echo ".NET is already installed:"
            dotnet --version
            dotnet --list-sdks
          else
            echo "Installing .NET manually..."
            
            # Create local dotnet directory
            mkdir -p $HOME/.dotnet
            export DOTNET_ROOT=$HOME/.dotnet
            export PATH=$DOTNET_ROOT:$PATH
            
            # Download and install .NET
            curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 9.0 --install-dir $HOME/.dotnet
            
            # Add to PATH for subsequent steps
            echo "DOTNET_ROOT=$HOME/.dotnet" >> $GITHUB_ENV
            echo "$HOME/.dotnet" >> $GITHUB_PATH
            
            echo "Verifying installation:"
            $HOME/.dotnet/dotnet --version
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Core API Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Ecom.Core/src/Ecom.Core.API/Dockerfile
          push: false
          load: true
          tags: moclaw/ecom-core-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Users API Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Ecom.Users/src/Ecom.Users.API/Dockerfile
          push: false
          load: true
          tags: moclaw/ecom-users-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set up Minikube
        uses: medyagh/setup-minikube@latest

      - name: Load images to Minikube
        run: |
          echo "Loading images to Minikube..."
          minikube image load moclaw/ecom-core-api:latest
          minikube image load moclaw/ecom-users-api:latest
          
          echo "Verifying images are loaded in Minikube..."
          minikube image ls | grep moclaw || echo "No moclaw images found"
          
          echo "All images in Minikube:"
          minikube image ls
          
      - name: Validate Kubernetes manifests
        run: |
          echo "Validating Kubernetes manifests..."
          
          # Check if files exist
          ls -la k8s/
          ls -la k8s/monitoring/
          
          # Validate YAML syntax
          echo "Validating namespace.yaml..."
          kubectl apply --dry-run=client -f k8s/namespace.yaml
          
          echo "Validating core-deployment.yaml..."
          kubectl apply --dry-run=client -f k8s/core-deployment.yaml
          
          echo "Validating users-deployment.yaml..."
          kubectl apply --dry-run=client -f k8s/users-deployment.yaml
          
          echo "Validating configmap.yaml..."
          kubectl apply --dry-run=client -f k8s/configmap.yaml
          
          echo "Validating prometheus-config.yaml..."
          kubectl apply --dry-run=client -f k8s/monitoring/prometheus-config.yaml
          
          echo "Validating prometheus-deployment.yaml..."
          kubectl apply --dry-run=client -f k8s/monitoring/prometheus-deployment.yaml

      - name: Deploy to Minikube
        run: |
          echo "Creating namespace..."
          kubectl apply -f k8s/namespace.yaml
          
          echo "Verifying namespace creation..."
          kubectl get namespace ecommerce
          sleep 5
          
          echo "Deploying applications..."
          kubectl apply -f k8s/core-deployment.yaml
          kubectl apply -f k8s/users-deployment.yaml
          kubectl apply -f k8s/configmap.yaml
          
          echo "Checking if deployments were created..."
          kubectl get deployments -n ecommerce
          
          echo "Checking initial pod status..."
          kubectl get pods -n ecommerce
          
      - name: Debug deployment issues
        run: |
          echo "=== DEBUGGING DEPLOYMENT ISSUES ==="
          
          echo "Checking deployment status..."
          kubectl get deployments -n ecommerce -o wide
          
          echo "Checking pods with detailed info..."
          kubectl get pods -n ecommerce -o wide
          
          echo "Describing ecom-core-api deployment..."
          kubectl describe deployment ecom-core-api -n ecommerce || echo "Core deployment not found"
          
          echo "Describing ecom-users-api deployment..."
          kubectl describe deployment ecom-users-api -n ecommerce || echo "Users deployment not found"
          
          echo "Checking events in ecommerce namespace..."
          kubectl get events -n ecommerce --sort-by='.lastTimestamp'
          
          echo "Checking if pods are stuck in ImagePull..."
          kubectl get pods -n ecommerce -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.phase}{"\t"}{.status.containerStatuses[0].state}{"\n"}{end}' || echo "No pods found"

      - name: Fix common deployment issues
        run: |
          echo "=== FIXING COMMON DEPLOYMENT ISSUES ==="
          
          # Wait a bit for initial deployment attempt
          sleep 30
          
          # Check for ImagePullBackOff or ErrImagePull issues
          echo "Checking for image pull issues..."
          kubectl get pods -n ecommerce
          
          FAILED_PODS=$(kubectl get pods -n ecommerce --field-selector=status.phase!=Running,status.phase!=Succeeded -o jsonpath='{.items[*].metadata.name}')
          
          if [ ! -z "$FAILED_PODS" ]; then
            echo "Found problematic pods: $FAILED_PODS"
            
            for pod in $FAILED_PODS; do
              echo "Describing pod $pod..."
              kubectl describe pod $pod -n ecommerce
              
              # Check if it's an image pull issue
              if kubectl get pod $pod -n ecommerce -o jsonpath='{.status.containerStatuses[0].state.waiting.reason}' | grep -E "(ImagePullBackOff|ErrImagePull)"; then
                echo "Pod $pod has image pull issues. Checking deployment imagePullPolicy..."
                
                # Get the deployment name from pod labels
                DEPLOYMENT=$(kubectl get pod $pod -n ecommerce -o jsonpath='{.metadata.labels.app}')
                if [ ! -z "$DEPLOYMENT" ]; then
                  echo "Patching deployment $DEPLOYMENT to use imagePullPolicy: Never for Minikube..."
                  kubectl patch deployment $DEPLOYMENT -n ecommerce -p '{"spec":{"template":{"spec":{"containers":[{"name":"'$DEPLOYMENT'","imagePullPolicy":"Never"}]}}}}'
                  
                  echo "Restarting deployment $DEPLOYMENT..."
                  kubectl rollout restart deployment/$DEPLOYMENT -n ecommerce
                fi
              fi
            done
          fi
          
          echo "Waiting for rollout to complete..."
          sleep 10

      - name: Deploy monitoring resources
        run: |
          echo "Deploying Prometheus configuration..."
          kubectl get namespace ecommerce || echo "Namespace not found"
          
          # Verify the config file exists and is valid
          echo "Checking prometheus config file..."
          cat k8s/monitoring/prometheus-config.yaml | head -10
          
          # Deploy Prometheus configuration
          kubectl apply -f k8s/monitoring/prometheus-config.yaml
          
          echo "Deploying Prometheus and Grafana..."
          # Deploy Prometheus server directly (without Operator)
          kubectl apply -f k8s/monitoring/prometheus-deployment.yaml
          
      - name: Verify deployment with extended timeout
        run: |
          echo "Waiting for deployments to be ready..."
          
          # Give deployments more time to start after potential fixes
          echo "Waiting 60 seconds for deployments to stabilize..."
          sleep 60
          
          # Check current status before waiting
          echo "Current deployment status:"
          kubectl get deployments -n ecommerce
          kubectl get pods -n ecommerce
          
          # Check if deployments exist first
          if kubectl get deployment ecom-core-api -n ecommerce > /dev/null 2>&1; then
            echo "Waiting for ecom-core-api deployment..."
            
            # Try waiting with shorter timeout first to get better error info
            if ! kubectl wait --for=condition=available --timeout=300s deployment/ecom-core-api -n ecommerce; then
              echo "Core API deployment failed after 5 minutes. Getting detailed logs..."
              kubectl get pods -n ecommerce -l app=ecom-core-api
              kubectl describe pods -n ecommerce -l app=ecom-core-api
              
              # Get logs from all containers in the pods
              for pod in $(kubectl get pods -n ecommerce -l app=ecom-core-api -o jsonpath='{.items[*].metadata.name}'); do
                echo "Logs for pod $pod:"
                kubectl logs $pod -n ecommerce --tail=100 || echo "No logs available for $pod"
              done
              
              echo "Deployment events:"
              kubectl describe deployment ecom-core-api -n ecommerce
              
              echo "Trying one more time with longer timeout..."
              kubectl wait --for=condition=available --timeout=300s deployment/ecom-core-api -n ecommerce || {
                echo "Core API deployment definitively failed"
                exit 1
              }
            fi
          else
            echo "ecom-core-api deployment not found!"
            exit 1
          fi
          
          if kubectl get deployment ecom-users-api -n ecommerce > /dev/null 2>&1; then
            echo "Waiting for ecom-users-api deployment..."
            
            if ! kubectl wait --for=condition=available --timeout=300s deployment/ecom-users-api -n ecommerce; then
              echo "Users API deployment failed after 5 minutes. Getting detailed logs..."
              kubectl get pods -n ecommerce -l app=ecom-users-api
              kubectl describe pods -n ecommerce -l app=ecom-users-api
              
              # Get logs from all containers in the pods
              for pod in $(kubectl get pods -n ecommerce -l app=ecom-users-api -o jsonpath='{.items[*].metadata.name}'); do
                echo "Logs for pod $pod:"
                kubectl logs $pod -n ecommerce --tail=100 || echo "No logs available for $pod"
              done
              
              echo "Deployment events:"
              kubectl describe deployment ecom-users-api -n ecommerce
              
              echo "Trying one more time with longer timeout..."
              kubectl wait --for=condition=available --timeout=300s deployment/ecom-users-api -n ecommerce || {
                echo "Users API deployment definitively failed"
                exit 1
              }
            fi
          else
            echo "ecom-users-api deployment not found!"
            exit 1
          fi
          
          echo "Final status check..."
          kubectl get pods -n ecommerce
          kubectl get services -n ecommerce
          
      - name: Wait for monitoring stack
        run: |
          echo "Waiting for monitoring deployments..."
          kubectl wait --for=condition=available --timeout=600s deployment/prometheus -n ecommerce || echo "Prometheus deployment timeout (may still be starting)"
          kubectl wait --for=condition=available --timeout=600s deployment/grafana -n ecommerce || echo "Grafana deployment timeout (may still be starting)"
          kubectl get pods -n ecommerce -l app=prometheus
          kubectl get pods -n ecommerce -l app=grafana

      - name: Test Service Health
        run: |
          echo "Testing service connectivity..."
          
          # Port forward and test Core API
          kubectl port-forward -n ecommerce service/ecom-core-service 8080:80 &
          CORE_PID=$!
          sleep 10
          
          # Test Core API health endpoint
          curl -f http://localhost:8080/health || echo "Core API health check failed (expected if /health endpoint not implemented)"
          
          # Clean up port forward
          kill $CORE_PID || true
          
          # Port forward and test Users API  
          kubectl port-forward -n ecommerce service/ecom-users-service 8081:80 &
          USERS_PID=$!
          sleep 10
          
          # Test Users API health endpoint
          curl -f http://localhost:8081/health || echo "Users API health check failed (expected if /health endpoint not implemented)"
          
          # Clean up port forward
          kill $USERS_PID || true
          
          # Test monitoring endpoints
          echo "Testing Prometheus..."
          kubectl port-forward -n ecommerce service/prometheus 9090:9090 &
          PROM_PID=$!
          sleep 10
          
          curl -f http://localhost:9090/-/healthy || echo "Prometheus health check failed"
          curl -s http://localhost:9090/api/v1/targets | grep -o '"health":"[^"]*"' || echo "Could not check Prometheus targets"
          
          kill $PROM_PID || true
          
          echo "Testing Grafana..."
          kubectl port-forward -n ecommerce service/grafana 3000:3000 &
          GRAFANA_PID=$!
          sleep 10
          
          curl -f http://localhost:3000/api/health || echo "Grafana health check failed"
          
          kill $GRAFANA_PID || true
          
          echo "Service connectivity tests completed"