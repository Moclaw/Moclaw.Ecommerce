name: Self-Hosted CI/CD - Ecommerce Platform

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOTNET_VERSION: "9.0"
  PROJECT_PATH: "/Users/lammoc/Project/Moclaw.Ecommerce"
  DOCKER_COMPOSE_FILE: "docker-compose.yml"
  HEALTH_CHECK_TIMEOUT: 300s

jobs:
  build-and-test:
    name: Build and Test
    runs-on: self-hosted
    outputs:
      image-tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          path: ${{ env.PROJECT_PATH }}
      
      - name: 📂 Navigate to project directory
        run: |
          cd ${{ env.PROJECT_PATH }}
          echo "Working directory: $(pwd)"
      
      - name: 🔧 Setup .NET SDK
        run: |
          # Check if .NET SDK is installed, if not, display message
          if ! command -v dotnet &> /dev/null; then
            echo "⚠️ .NET SDK not found. Please install .NET ${{ env.DOTNET_VERSION }} on the self-hosted runner."
            exit 1
          fi
          
          # Display installed version
          dotnet --info | grep "Version"

      - name: 📦 Restore dependencies
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          dotnet restore Moclaw.Ecommerce.sln --verbosity minimal

      - name: 🏗️ Build solution
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          dotnet build Moclaw.Ecommerce.sln --configuration Release --no-restore --verbosity minimal

      - name: 🧪 Run tests (if available)
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          echo "🔍 Searching for test projects..."
          if find . -name "*Test*.csproj" -o -name "*Tests.csproj" | head -1 | grep -q .; then
            echo "✅ Test projects found, running tests..."
            dotnet test Moclaw.Ecommerce.sln --configuration Release --no-build --verbosity minimal
          else
            echo "⚠️ No test projects found, skipping tests"
          fi
      
      - name: 🏷️ Set image tag
        id: set-tag
        run: |
          TAG=$(date +%Y%m%d%H%M%S)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "🏷️ Set image tag to: $TAG"

  deploy:
    name: Deploy Application
    runs-on: self-hosted
    needs: [build-and-test]
    
    steps:
      - name: 🧹 Clean up existing containers
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          echo "🧹 Cleaning up existing containers..."
          docker compose down --remove-orphans || true
          docker container prune -f || true
          docker network prune -f || true

      - name: 🐳 Build and deploy with Docker Compose
        working-directory: ${{ env.PROJECT_PATH }}
        env:
          IMAGE_TAG: ${{ needs.build-and-test.outputs.image-tag }}
          DOCKER_REGISTRY: ${{ secrets.REGISTRY_USERNAME && format('{0}/', secrets.REGISTRY_USERNAME) || '' }}
        run: |
          echo "🚀 Starting Docker deployment..."
          echo "Image Tag: $IMAGE_TAG"
          echo "Registry: $DOCKER_REGISTRY"
          
          # Set environment variables for docker-compose
          export DOCKER_REGISTRY="${DOCKER_REGISTRY}"
          export IMAGE_TAG="${IMAGE_TAG}"

          # Create override file with specific image tags if registry is available
          if [ -n "${{ secrets.REGISTRY_USERNAME }}" ] && [ -n "$IMAGE_TAG" ]; then
            echo "✅ Using registry images with tag: $IMAGE_TAG"
            cat > docker-compose.override.yml << EOF
          version: '3.8'
          services:
            ecom.gateway.api:
              image: ${{ secrets.REGISTRY_USERNAME }}/ecomgatewayapi:${IMAGE_TAG}
              build: null
            ecom.core.api:
              image: ${{ secrets.REGISTRY_USERNAME }}/ecomcoreapi:${IMAGE_TAG}
              build: null
            ecom.users.api:
              image: ${{ secrets.REGISTRY_USERNAME }}/ecomusersapi:${IMAGE_TAG}
              build: null
          EOF
            echo "📋 Override file created:"
            cat docker-compose.override.yml
          else
            echo "⚠️ No registry credentials - will build locally"
          fi

          # Start services
          if [ -f "docker-compose.override.yml" ]; then
            echo "🚀 Deploying with registry images..."
            docker compose -f docker-compose.yml -f docker-compose.override.yml up -d
          else
            echo "🏗️ Building and deploying locally..."
            docker compose build --no-cache
            docker compose up -d
          fi
          
          echo "✅ Docker deployment initiated"

      - name: ⏳ Wait for services to be ready
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          echo "⏳ Waiting for Docker services to start..."
          sleep 15

          # Enhanced health check function
          check_service() {
            local port=$1
            local name=$2
            local max_attempts=15
            local attempt=1
            
            echo "🔍 Checking $name service on port $port..."
            
            while [ $attempt -le $max_attempts ]; do
              # Check if container is running first
              if ! docker compose ps --services --filter "status=running" | grep -q "${name,,}"; then
                echo "⚠️ $name container is not running (attempt $attempt/$max_attempts)"
                sleep 10
                attempt=$((attempt + 1))
                continue
              fi
              
              # Check HTTP endpoints
              if curl -s -f "http://localhost:$port/health" > /dev/null 2>&1; then
                echo "✅ $name health endpoint is responding on port $port"
                return 0
              elif curl -s -f "http://localhost:$port" > /dev/null 2>&1; then
                echo "✅ $name is responding on port $port (no health endpoint)"
                return 0
              fi
              
              echo "⏳ Waiting for $name on port $port (attempt $attempt/$max_attempts)..."
              sleep 10
              attempt=$((attempt + 1))
            done
            
            echo "❌ $name health check timeout on port $port"
            echo "📋 Container logs for debugging:"
            docker compose logs --tail=20 "$name" || true
            return 1
          }

          # Check each service with Docker-aware health checks
          check_service 5300 "ecom.gateway.api" 
          check_service 5301 "ecom.core.api" 
          check_service 5302 "ecom.users.api"
          
          echo "✅ All services health checks completed"

      - name: 📊 Show deployment status
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          echo "🎉 Deployment completed!"
          echo "===================="
          echo "Services:"
          docker compose ps
          echo ""
          echo "Service URLs:"
          echo "- Gateway API: http://localhost:5300"
          echo "- Core API: http://localhost:5301"
          echo "- Users API: http://localhost:5302"

      - name: 🧹 Cleanup on failure
        if: failure()
        working-directory: ${{ env.PROJECT_PATH }}
        run: |
          echo "❌ Deployment failed, cleaning up..."
          docker compose logs --tail=50
          docker compose down --volumes --remove-orphans || true
          docker container prune -f || true

  cleanup:
    name: Post-deployment Cleanup
    runs-on: self-hosted
    needs: [deploy]
    if: always()

    steps:
      - name: 🧹 Clean up old Docker resources
        run: |
          echo "🧹 Starting post-deployment cleanup..."

          # Clean up old Docker images (keep last 3 versions)
          echo "🖼️ Cleaning up old images..."
          docker image prune -f --filter "until=24h" || true
          docker builder prune -f --filter "until=24h" || true

          # Clean up unused volumes
          echo "💾 Cleaning up unused volumes..."
          docker volume prune -f || true

          # Clean up unused networks
          echo "🌐 Cleaning up unused networks..."
          docker network prune -f || true

          # Clean up temporary files
          echo "📁 Cleaning up temporary files..."
          rm -f docker-compose.override.yml || true

          # Show final system status
          echo "📊 Final system status:"
          echo "Docker system usage:"
          docker system df || true
          echo ""
          echo "Active containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || true
          
          echo "✅ Post-deployment cleanup completed"

  notify-status:
    name: Notify Deployment Status
    runs-on: self-hosted
    needs: [build-and-test, deploy, cleanup]
    if: always()

    steps:
      - name: 📢 Deployment Status Summary
        run: |
          echo "🚀 Deployment Pipeline Summary"
          echo "=============================="
          echo "Build & Test: ${{ needs.build-and-test.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
          echo "Cleanup: ${{ needs.cleanup.result }}"
          echo "Image Tag: ${{ needs.build-and-test.outputs.image-tag }}"
          echo ""

          if [ "${{ needs.deploy.result }}" = "success" ]; then
            echo "✅ Deployment completed successfully!"
            echo "🌐 Services are available at:"
            echo "  - Gateway API: http://localhost:5300"
            echo "  - Core API: http://localhost:5301" 
            echo "  - Users API: http://localhost:5302"
          else
            echo "❌ Deployment failed!"
            echo "🧹 Resources have been cleaned up automatically"
            echo "🔍 Check the deployment logs for details"
          fi
          # Check each service with Docker-aware health checks
          check_service 5300 "Gateway-API" &
          check_service 5301 "Core-API" &
          check_service 5302 "Users-API" &
          
          # Wait for all health checks
          wait
          
          echo "✅ All services health checks completed"

      - name: 📊 Show deployment status
        run: |
          echo "🎉 Deployment completed!"
          echo "===================="
          echo "Services:"
          docker compose ps
          echo ""
          echo "Service URLs:"
          echo "- Gateway API: http://localhost:5300"
          echo "- Core API: http://localhost:5301"
          echo "- Users API: http://localhost:5302"
